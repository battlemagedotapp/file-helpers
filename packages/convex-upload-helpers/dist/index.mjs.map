{"version":3,"sources":["../src/providers/FileUploadProvider.tsx","../src/hooks/useFileUpload.ts","../src/components/MultipleFileUploader.tsx","../src/components/SingleFileUploader.tsx"],"sourcesContent":["import type { Id } from 'node_modules/convex/dist/esm-types/values/value';\r\nimport { createContext, type ReactNode, useContext } from 'react';\r\n\r\nexport type GenerateUploadUrlFunc = () => Promise<string>;\r\nexport type SaveFileFunc = (args: { name: string; storageId: Id<'_storage'>; type: string; size: number }) => Promise<unknown>;\r\nexport type DeleteFileFunc = (args: { storageId: Id<'_storage'>; }) => Promise<unknown>;\r\n\r\ninterface FileUploadContextState {\r\n    generateUploadUrl: GenerateUploadUrlFunc;\r\n    saveFile: SaveFileFunc;\r\n    deleteFile: DeleteFileFunc;\r\n}\r\n\r\nconst FileUploadContext = createContext<FileUploadContextState | undefined>(undefined);\r\n\r\ninterface FileUploadProviderProps {\r\n    children: ReactNode;\r\n    generateUploadUrl: GenerateUploadUrlFunc;\r\n    saveFile: SaveFileFunc;\r\n    deleteFile: DeleteFileFunc;\r\n}\r\n\r\nexport const FileUploadProvider = ({\r\n    children,\r\n    generateUploadUrl,\r\n    saveFile,\r\n    deleteFile,\r\n}: FileUploadProviderProps) => {\r\n    const value = {\r\n        generateUploadUrl,\r\n        saveFile,\r\n        deleteFile,\r\n    };\r\n\r\n    return (\r\n        <FileUploadContext.Provider value={value}>\r\n            {children}\r\n        </FileUploadContext.Provider>\r\n    );\r\n};\r\n\r\n// eslint-disable-next-line react-refresh/only-export-components\r\nexport const useFileUploadActions = () => {\r\n    const context = useContext(FileUploadContext);\r\n    if (context === undefined) {\r\n        throw new Error('useFileUploadActions must be used within a FileUploadProvider');\r\n    }\r\n    return context;\r\n};","import { useFileUploadActions } from '@/providers/FileUploadProvider'\r\nimport type { Id } from 'node_modules/convex/dist/esm-types/values/value'\r\nimport { useCallback, useState } from 'react'\r\nimport { toast } from 'sonner'\r\n\r\nexport interface UseFileUploadConfig {\r\n  maxSizeInMB?: number\r\n  allowedTypes?: string[]\r\n  successMessage?: string\r\n  errorMessage?: string\r\n  deleteSuccessMessage?: string\r\n  deleteErrorMessage?: string\r\n}\r\n\r\nexport function useFileUpload(config: UseFileUploadConfig = {}) {\r\n  const {\r\n    generateUploadUrl,\r\n    saveFile,\r\n    deleteFile: providedDeleteFile,\r\n  } = useFileUploadActions()\r\n\r\n  const {\r\n    maxSizeInMB = 10,\r\n    allowedTypes = [],\r\n    successMessage = 'File uploaded successfully!',\r\n    errorMessage = 'Failed to upload file',\r\n    deleteSuccessMessage = 'File deleted successfully!',\r\n    deleteErrorMessage = 'Failed to delete file.',\r\n  } = config\r\n\r\n  const [isUploading, setIsUploading] = useState(false)\r\n  const [isDeleting, setIsDeleting] = useState(false)\r\n\r\n  const validateFile = useCallback(\r\n    (file: File): string | null => {\r\n      if (file.size > maxSizeInMB * 1024 * 1024) {\r\n        return `File size must be less than ${maxSizeInMB}MB`\r\n      }\r\n      if (allowedTypes.length > 0 && !allowedTypes.includes(file.type)) {\r\n        return `File type not allowed. Allowed types: ${allowedTypes.join(', ')}`\r\n      }\r\n      return null\r\n    },\r\n    [maxSizeInMB, allowedTypes],\r\n  )\r\n\r\n  const uploadFile = useCallback(\r\n    async (file: File): Promise<string> => {\r\n      const validationError = validateFile(file)\r\n      if (validationError) {\r\n        toast.error(validationError)\r\n        throw new Error(validationError)\r\n      }\r\n\r\n      setIsUploading(true)\r\n      const loadingToast = toast.loading(`Uploading ${file.name}...`)\r\n\r\n      try {\r\n        const uploadUrl = await generateUploadUrl()\r\n        const result = await fetch(uploadUrl, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': file.type },\r\n          body: file,\r\n        })\r\n\r\n        if (!result.ok) throw new Error(`Upload failed: ${result.statusText}`)\r\n\r\n        const { storageId } = await result.json()\r\n\r\n        await saveFile({\r\n          name: file.name,\r\n          storageId,\r\n          type: file.type,\r\n          size: file.size,\r\n        })\r\n\r\n        setIsUploading(false)\r\n        toast.success(successMessage, { id: loadingToast })\r\n        return storageId as string\r\n      } catch (error) {\r\n        setIsUploading(false)\r\n        const message = error instanceof Error ? error.message : errorMessage\r\n        toast.error(message, { id: loadingToast })\r\n        throw error\r\n      }\r\n    },\r\n    [validateFile, generateUploadUrl, saveFile, successMessage, errorMessage],\r\n  )\r\n\r\n  const uploadMultipleFiles = useCallback(\r\n    async (files: File[]): Promise<string[]> => {\r\n      const loadingToast = toast.loading(`Uploading ${files.length} files...`)\r\n      try {\r\n        const storageIds = await Promise.all(files.map(uploadFile))\r\n        toast.success(`Successfully uploaded ${files.length} files!`, {\r\n          id: loadingToast,\r\n        })\r\n        return storageIds\r\n      } catch (error) {\r\n        toast.error('Some files failed to upload.', { id: loadingToast })\r\n        throw error\r\n      }\r\n    },\r\n    [uploadFile],\r\n  )\r\n\r\n  const deleteFile = useCallback(\r\n    async (args: { storageId: Id<'_storage'> }) => {\r\n      setIsDeleting(true)\r\n      const loadingToast = toast.loading('Deleting file...')\r\n      try {\r\n        await providedDeleteFile(args)\r\n        toast.success(deleteSuccessMessage, { id: loadingToast })\r\n      } catch (error) {\r\n        const message =\r\n          error instanceof Error ? error.message : deleteErrorMessage\r\n        toast.error(message, { id: loadingToast })\r\n        throw error\r\n      } finally {\r\n        setIsDeleting(false)\r\n      }\r\n    },\r\n    [providedDeleteFile, deleteSuccessMessage, deleteErrorMessage],\r\n  )\r\n\r\n  return {\r\n    uploadFile,\r\n    uploadMultipleFiles,\r\n    deleteFile,\r\n    isUploading,\r\n    isDeleting,\r\n  }\r\n}\r\n","import { useFileUpload } from \"@/hooks/useFileUpload\";\r\nimport type { Id } from \"node_modules/convex/dist/esm-types/values/value\";\r\nimport React, { useRef, useState } from \"react\";\r\n\r\ntype MultipleFileUploaderRenderProps = {\r\n    isUploading: boolean;\r\n    fileFields: { id: string; value: string }[];\r\n    handleFileChange: (event: React.ChangeEvent<HTMLInputElement>) => Promise<void>;\r\n    handleFileDelete: (index: number) => Promise<void>;\r\n    triggerFileSelect: () => void;\r\n    fileInputRef: React.RefObject<HTMLInputElement | null>;\r\n    maxFiles: number;\r\n    canAddMore: boolean;\r\n    remainingSlots: number;\r\n};\r\n\r\ntype MultipleFileUploaderProps = {\r\n    fileFields: { id: string; value: string }[];\r\n    appendFile: (f: { value: string }) => void;\r\n    removeFile: (index: number) => void;\r\n    maxFiles: number;\r\n    maxSizeInMB?: number;\r\n    allowedTypes?: string[];\r\n    successMessage?: string;\r\n    errorMessage?: string;\r\n    children: (props: MultipleFileUploaderRenderProps) => React.ReactNode;\r\n};\r\n\r\nexport function MultipleFileUploader({\r\n    fileFields,\r\n    appendFile,\r\n    removeFile,\r\n    maxFiles,\r\n    maxSizeInMB,\r\n    allowedTypes = [],\r\n    successMessage = \"Files uploaded successfully!\",\r\n    errorMessage = \"Failed to upload files\",\r\n    children,\r\n}: MultipleFileUploaderProps) {\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n\r\n    const { uploadFile, uploadMultipleFiles, deleteFile } = useFileUpload({\r\n        maxSizeInMB,\r\n        allowedTypes,\r\n        successMessage,\r\n        errorMessage,\r\n    });\r\n\r\n    const handleFileDelete = async (index: number) => {\r\n        await deleteFile({ storageId: fileFields[index].value as Id<'_storage'> });\r\n        removeFile(index);\r\n    };\r\n\r\n    const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const files = event.target.files;\r\n        if (!files || files.length === 0) return;\r\n\r\n        const filesArray = Array.from(files);\r\n        const remaining = Math.max(0, maxFiles - fileFields.length);\r\n\r\n        if (remaining <= 0) {\r\n            if (fileInputRef.current) fileInputRef.current.value = \"\";\r\n            return;\r\n        }\r\n\r\n        if (filesArray.length > remaining) {\r\n            filesArray.splice(remaining);\r\n        }\r\n\r\n        setIsUploading(true);\r\n        try {\r\n            if (filesArray.length === 1) {\r\n                const storageId = await uploadFile(filesArray[0]);\r\n                appendFile({ value: storageId });\r\n            } else {\r\n                const storageIds = await uploadMultipleFiles(filesArray);\r\n                storageIds.forEach((storageId) => appendFile({ value: storageId }));\r\n            }\r\n        } finally {\r\n            setIsUploading(false);\r\n        }\r\n\r\n        if (fileInputRef.current) fileInputRef.current.value = \"\";\r\n    };\r\n\r\n    const triggerFileSelect = () => {\r\n        fileInputRef.current?.click();\r\n    };\r\n\r\n    const canAddMore = fileFields.length < maxFiles;\r\n    const remainingSlots = Math.max(0, maxFiles - fileFields.length);\r\n\r\n    const renderProps: MultipleFileUploaderRenderProps = {\r\n        isUploading,\r\n        fileFields,\r\n        handleFileChange,\r\n        handleFileDelete,\r\n        triggerFileSelect,\r\n        fileInputRef,\r\n        maxFiles,\r\n        canAddMore,\r\n        remainingSlots,\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                ref={fileInputRef}\r\n                type=\"file\"\r\n                multiple\r\n                onChange={handleFileChange}\r\n                className=\"hidden\"\r\n            />\r\n            {children(renderProps)}\r\n        </>\r\n    );\r\n}\r\n","import { useFileUpload } from \"@/hooks/useFileUpload\";\r\nimport type { Id } from \"node_modules/convex/dist/esm-types/values/value\";\r\nimport React, { useRef, useState } from \"react\";\r\n\r\ntype SingleFileUploaderRenderProps = {\r\n    isUploading: boolean;\r\n    file?: { id: string; value: string } | null;\r\n    handleFileChange: (event: React.ChangeEvent<HTMLInputElement>) => Promise<void>;\r\n    handleFileDelete: () => Promise<void>;\r\n    triggerFileSelect: () => void;\r\n    fileInputRef: React.RefObject<HTMLInputElement | null>;\r\n    hasFile: boolean;\r\n};\r\n\r\ntype SingleFileUploaderProps = {\r\n    file?: { id: string; value: string } | null;\r\n    setFile: (f: { value: string }) => void;\r\n    removeFile: () => void;\r\n    maxSizeInMB?: number;\r\n    allowedTypes?: string[];\r\n    successMessage?: string;\r\n    errorMessage?: string;\r\n    children: (props: SingleFileUploaderRenderProps) => React.ReactNode;\r\n};\r\n\r\nexport function SingleFileUploader({\r\n    file,\r\n    setFile,\r\n    removeFile,\r\n    maxSizeInMB,\r\n    allowedTypes = [],\r\n    successMessage = \"File uploaded successfully!\",\r\n    errorMessage = \"Failed to upload file\",\r\n    children,\r\n}: SingleFileUploaderProps) {\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n\r\n    const { uploadFile, deleteFile } = useFileUpload({\r\n        maxSizeInMB,\r\n        allowedTypes,\r\n        successMessage,\r\n        errorMessage,\r\n    });\r\n\r\n    const handleFileDelete = async () => {\r\n        if (!file) return;\r\n        await deleteFile({ storageId: file.value as Id<'_storage'> });\r\n        removeFile();\r\n    };\r\n\r\n    const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const files = event.target.files;\r\n        if (!files || files.length === 0) return;\r\n\r\n        const pickedFile = files[0];\r\n\r\n        setIsUploading(true);\r\n        try {\r\n            const storageId = await uploadFile(pickedFile);\r\n            setFile({ value: storageId });\r\n        } finally {\r\n            setIsUploading(false);\r\n        }\r\n\r\n        if (fileInputRef.current) fileInputRef.current.value = \"\";\r\n    };\r\n\r\n    const triggerFileSelect = () => {\r\n        fileInputRef.current?.click();\r\n    };\r\n\r\n    const hasFile = Boolean(file);\r\n\r\n    const renderProps: SingleFileUploaderRenderProps = {\r\n        isUploading,\r\n        file,\r\n        handleFileChange,\r\n        handleFileDelete,\r\n        triggerFileSelect,\r\n        fileInputRef,\r\n        hasFile,\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                ref={fileInputRef}\r\n                type=\"file\"\r\n                onChange={handleFileChange}\r\n                className=\"hidden\"\r\n            />\r\n            {children(renderProps)}\r\n        </>\r\n    );\r\n}\r\n"],"mappings":";AACA,SAAS,eAA+B,kBAAkB;AAkClD;AAtBR,IAAM,oBAAoB,cAAkD,MAAS;AAS9E,IAAM,qBAAqB,CAAC;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,MAA+B;AAC3B,QAAM,QAAQ;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAEA,SACI,oBAAC,kBAAkB,UAAlB,EAA2B,OACvB,UACL;AAER;AAGO,IAAM,uBAAuB,MAAM;AACtC,QAAM,UAAU,WAAW,iBAAiB;AAC5C,MAAI,YAAY,QAAW;AACvB,UAAM,IAAI,MAAM,+DAA+D;AAAA,EACnF;AACA,SAAO;AACX;;;AC9CA,SAAS,aAAa,gBAAgB;AACtC,SAAS,aAAa;AAWf,SAAS,cAAc,SAA8B,CAAC,GAAG;AAC9D,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA,YAAY;AAAA,EACd,IAAI,qBAAqB;AAEzB,QAAM;AAAA,IACJ,cAAc;AAAA,IACd,eAAe,CAAC;AAAA,IAChB,iBAAiB;AAAA,IACjB,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,qBAAqB;AAAA,EACvB,IAAI;AAEJ,QAAM,CAAC,aAAa,cAAc,IAAI,SAAS,KAAK;AACpD,QAAM,CAAC,YAAY,aAAa,IAAI,SAAS,KAAK;AAElD,QAAM,eAAe;AAAA,IACnB,CAAC,SAA8B;AAC7B,UAAI,KAAK,OAAO,cAAc,OAAO,MAAM;AACzC,eAAO,+BAA+B,WAAW;AAAA,MACnD;AACA,UAAI,aAAa,SAAS,KAAK,CAAC,aAAa,SAAS,KAAK,IAAI,GAAG;AAChE,eAAO,yCAAyC,aAAa,KAAK,IAAI,CAAC;AAAA,MACzE;AACA,aAAO;AAAA,IACT;AAAA,IACA,CAAC,aAAa,YAAY;AAAA,EAC5B;AAEA,QAAM,aAAa;AAAA,IACjB,OAAO,SAAgC;AACrC,YAAM,kBAAkB,aAAa,IAAI;AACzC,UAAI,iBAAiB;AACnB,cAAM,MAAM,eAAe;AAC3B,cAAM,IAAI,MAAM,eAAe;AAAA,MACjC;AAEA,qBAAe,IAAI;AACnB,YAAM,eAAe,MAAM,QAAQ,aAAa,KAAK,IAAI,KAAK;AAE9D,UAAI;AACF,cAAM,YAAY,MAAM,kBAAkB;AAC1C,cAAM,SAAS,MAAM,MAAM,WAAW;AAAA,UACpC,QAAQ;AAAA,UACR,SAAS,EAAE,gBAAgB,KAAK,KAAK;AAAA,UACrC,MAAM;AAAA,QACR,CAAC;AAED,YAAI,CAAC,OAAO,GAAI,OAAM,IAAI,MAAM,kBAAkB,OAAO,UAAU,EAAE;AAErE,cAAM,EAAE,UAAU,IAAI,MAAM,OAAO,KAAK;AAExC,cAAM,SAAS;AAAA,UACb,MAAM,KAAK;AAAA,UACX;AAAA,UACA,MAAM,KAAK;AAAA,UACX,MAAM,KAAK;AAAA,QACb,CAAC;AAED,uBAAe,KAAK;AACpB,cAAM,QAAQ,gBAAgB,EAAE,IAAI,aAAa,CAAC;AAClD,eAAO;AAAA,MACT,SAAS,OAAO;AACd,uBAAe,KAAK;AACpB,cAAM,UAAU,iBAAiB,QAAQ,MAAM,UAAU;AACzD,cAAM,MAAM,SAAS,EAAE,IAAI,aAAa,CAAC;AACzC,cAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,CAAC,cAAc,mBAAmB,UAAU,gBAAgB,YAAY;AAAA,EAC1E;AAEA,QAAM,sBAAsB;AAAA,IAC1B,OAAO,UAAqC;AAC1C,YAAM,eAAe,MAAM,QAAQ,aAAa,MAAM,MAAM,WAAW;AACvE,UAAI;AACF,cAAM,aAAa,MAAM,QAAQ,IAAI,MAAM,IAAI,UAAU,CAAC;AAC1D,cAAM,QAAQ,yBAAyB,MAAM,MAAM,WAAW;AAAA,UAC5D,IAAI;AAAA,QACN,CAAC;AACD,eAAO;AAAA,MACT,SAAS,OAAO;AACd,cAAM,MAAM,gCAAgC,EAAE,IAAI,aAAa,CAAC;AAChE,cAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,CAAC,UAAU;AAAA,EACb;AAEA,QAAM,aAAa;AAAA,IACjB,OAAO,SAAwC;AAC7C,oBAAc,IAAI;AAClB,YAAM,eAAe,MAAM,QAAQ,kBAAkB;AACrD,UAAI;AACF,cAAM,mBAAmB,IAAI;AAC7B,cAAM,QAAQ,sBAAsB,EAAE,IAAI,aAAa,CAAC;AAAA,MAC1D,SAAS,OAAO;AACd,cAAM,UACJ,iBAAiB,QAAQ,MAAM,UAAU;AAC3C,cAAM,MAAM,SAAS,EAAE,IAAI,aAAa,CAAC;AACzC,cAAM;AAAA,MACR,UAAE;AACA,sBAAc,KAAK;AAAA,MACrB;AAAA,IACF;AAAA,IACA,CAAC,oBAAoB,sBAAsB,kBAAkB;AAAA,EAC/D;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;AClIA,SAAgB,QAAQ,YAAAA,iBAAgB;AAwGhC,mBACI,OAAAC,MADJ;AA9ED,SAAS,qBAAqB;AAAA,EACjC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,eAAe,CAAC;AAAA,EAChB,iBAAiB;AAAA,EACjB,eAAe;AAAA,EACf;AACJ,GAA8B;AAC1B,QAAM,eAAe,OAAyB,IAAI;AAClD,QAAM,CAAC,aAAa,cAAc,IAAID,UAAS,KAAK;AAEpD,QAAM,EAAE,YAAY,qBAAqB,WAAW,IAAI,cAAc;AAAA,IAClE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AAED,QAAM,mBAAmB,OAAO,UAAkB;AAC9C,UAAM,WAAW,EAAE,WAAW,WAAW,KAAK,EAAE,MAAwB,CAAC;AACzE,eAAW,KAAK;AAAA,EACpB;AAEA,QAAM,mBAAmB,OAAO,UAA+C;AAC3E,UAAM,QAAQ,MAAM,OAAO;AAC3B,QAAI,CAAC,SAAS,MAAM,WAAW,EAAG;AAElC,UAAM,aAAa,MAAM,KAAK,KAAK;AACnC,UAAM,YAAY,KAAK,IAAI,GAAG,WAAW,WAAW,MAAM;AAE1D,QAAI,aAAa,GAAG;AAChB,UAAI,aAAa,QAAS,cAAa,QAAQ,QAAQ;AACvD;AAAA,IACJ;AAEA,QAAI,WAAW,SAAS,WAAW;AAC/B,iBAAW,OAAO,SAAS;AAAA,IAC/B;AAEA,mBAAe,IAAI;AACnB,QAAI;AACA,UAAI,WAAW,WAAW,GAAG;AACzB,cAAM,YAAY,MAAM,WAAW,WAAW,CAAC,CAAC;AAChD,mBAAW,EAAE,OAAO,UAAU,CAAC;AAAA,MACnC,OAAO;AACH,cAAM,aAAa,MAAM,oBAAoB,UAAU;AACvD,mBAAW,QAAQ,CAAC,cAAc,WAAW,EAAE,OAAO,UAAU,CAAC,CAAC;AAAA,MACtE;AAAA,IACJ,UAAE;AACE,qBAAe,KAAK;AAAA,IACxB;AAEA,QAAI,aAAa,QAAS,cAAa,QAAQ,QAAQ;AAAA,EAC3D;AAEA,QAAM,oBAAoB,MAAM;AAC5B,iBAAa,SAAS,MAAM;AAAA,EAChC;AAEA,QAAM,aAAa,WAAW,SAAS;AACvC,QAAM,iBAAiB,KAAK,IAAI,GAAG,WAAW,WAAW,MAAM;AAE/D,QAAM,cAA+C;AAAA,IACjD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAEA,SACI,iCACI;AAAA,oBAAAC;AAAA,MAAC;AAAA;AAAA,QACG,KAAK;AAAA,QACL,MAAK;AAAA,QACL,UAAQ;AAAA,QACR,UAAU;AAAA,QACV,WAAU;AAAA;AAAA,IACd;AAAA,IACC,SAAS,WAAW;AAAA,KACzB;AAER;;;ACnHA,SAAgB,UAAAC,SAAQ,YAAAC,iBAAgB;AAmFhC,qBAAAC,WACI,OAAAC,MADJ,QAAAC,aAAA;AA5DD,SAAS,mBAAmB;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,eAAe,CAAC;AAAA,EAChB,iBAAiB;AAAA,EACjB,eAAe;AAAA,EACf;AACJ,GAA4B;AACxB,QAAM,eAAeJ,QAAyB,IAAI;AAClD,QAAM,CAAC,aAAa,cAAc,IAAIC,UAAS,KAAK;AAEpD,QAAM,EAAE,YAAY,WAAW,IAAI,cAAc;AAAA,IAC7C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AAED,QAAM,mBAAmB,YAAY;AACjC,QAAI,CAAC,KAAM;AACX,UAAM,WAAW,EAAE,WAAW,KAAK,MAAwB,CAAC;AAC5D,eAAW;AAAA,EACf;AAEA,QAAM,mBAAmB,OAAO,UAA+C;AAC3E,UAAM,QAAQ,MAAM,OAAO;AAC3B,QAAI,CAAC,SAAS,MAAM,WAAW,EAAG;AAElC,UAAM,aAAa,MAAM,CAAC;AAE1B,mBAAe,IAAI;AACnB,QAAI;AACA,YAAM,YAAY,MAAM,WAAW,UAAU;AAC7C,cAAQ,EAAE,OAAO,UAAU,CAAC;AAAA,IAChC,UAAE;AACE,qBAAe,KAAK;AAAA,IACxB;AAEA,QAAI,aAAa,QAAS,cAAa,QAAQ,QAAQ;AAAA,EAC3D;AAEA,QAAM,oBAAoB,MAAM;AAC5B,iBAAa,SAAS,MAAM;AAAA,EAChC;AAEA,QAAM,UAAU,QAAQ,IAAI;AAE5B,QAAM,cAA6C;AAAA,IAC/C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAEA,SACI,gBAAAG,MAAAF,WAAA,EACI;AAAA,oBAAAC;AAAA,MAAC;AAAA;AAAA,QACG,KAAK;AAAA,QACL,MAAK;AAAA,QACL,UAAU;AAAA,QACV,WAAU;AAAA;AAAA,IACd;AAAA,IACC,SAAS,WAAW;AAAA,KACzB;AAER;","names":["useState","jsx","useRef","useState","Fragment","jsx","jsxs"]}