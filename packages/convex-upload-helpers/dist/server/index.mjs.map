{"version":3,"sources":["../../src/server/filesTable.ts","../../src/server/http.ts"],"sourcesContent":["import { defineTable } from 'convex/server'\r\nimport { v, type GenericValidator } from 'convex/values'\r\n\r\nexport const filesTableFields = {\r\n  name: v.string(),\r\n  storageId: v.id('_storage'),\r\n  type: v.optional(v.string()),\r\n  size: v.optional(v.number()),\r\n  uploadedBy: v.id('users'),\r\n}\r\n\r\nexport function filesTable(fields: Record<string, GenericValidator> = {}) {\r\n  return defineTable({\r\n    ...filesTableFields,\r\n    ...fields,\r\n  })\r\n    .index('by_storage_id', ['storageId'])\r\n    .index('by_uploaded_by', ['uploadedBy'])\r\n}\r\n","import type { GenericActionCtx } from 'convex/server'\r\nimport type { Id } from 'node_modules/convex/dist/esm-types/values/value'\r\n\r\nexport async function handleGetImage(\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  ctx: GenericActionCtx<any>,\r\n  request: Request,\r\n) {\r\n  const { searchParams } = new URL(request.url)\r\n  const storageId = searchParams.get('storageId') as Id<'_storage'>\r\n\r\n  if (!storageId) {\r\n    return new Response('Storage ID is required', { status: 400 })\r\n  }\r\n\r\n  try {\r\n    const blob = await ctx.storage.get(storageId)\r\n    if (blob === null) {\r\n      return new Response('Image not found', { status: 404 })\r\n    }\r\n\r\n    return new Response(blob, {\r\n      headers: {\r\n        'Content-Type': blob.type || 'image/jpeg',\r\n        'Cache-Control': 'public, max-age=31536000',\r\n      },\r\n    })\r\n  } catch (error) {\r\n    console.error('Error serving file:', error)\r\n    return new Response('Internal server error', { status: 500 })\r\n  }\r\n}\r\n\r\nexport async function handleGetAudio(\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  ctx: GenericActionCtx<any>,\r\n  request: Request,\r\n) {\r\n  const { searchParams } = new URL(request.url)\r\n  const storageId = searchParams.get('storageId')! as Id<'_storage'>\r\n\r\n  if (!storageId) {\r\n    return new Response('Storage ID is required', { status: 400 })\r\n  }\r\n\r\n  try {\r\n    const blob = await ctx.storage.get(storageId)\r\n    if (blob === null) {\r\n      return new Response('Audio not found', { status: 404 })\r\n    }\r\n\r\n    return new Response(blob, {\r\n      headers: {\r\n        'Content-Type': blob.type || 'audio/mpeg',\r\n        'Cache-Control': 'public, max-age=31536000',\r\n      },\r\n    })\r\n  } catch (error) {\r\n    console.error('Error serving audio:', error)\r\n    return new Response('Internal server error', { status: 500 })\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAAS,mBAAmB;AAC5B,SAAS,SAAgC;AAElC,IAAM,mBAAmB;AAAA,EAC9B,MAAM,EAAE,OAAO;AAAA,EACf,WAAW,EAAE,GAAG,UAAU;AAAA,EAC1B,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC;AAAA,EAC3B,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC;AAAA,EAC3B,YAAY,EAAE,GAAG,OAAO;AAC1B;AAEO,SAAS,WAAW,SAA2C,CAAC,GAAG;AACxE,SAAO,YAAY;AAAA,IACjB,GAAG;AAAA,IACH,GAAG;AAAA,EACL,CAAC,EACE,MAAM,iBAAiB,CAAC,WAAW,CAAC,EACpC,MAAM,kBAAkB,CAAC,YAAY,CAAC;AAC3C;;;ACfA,eAAsB,eAEpB,KACA,SACA;AACA,QAAM,EAAE,aAAa,IAAI,IAAI,IAAI,QAAQ,GAAG;AAC5C,QAAM,YAAY,aAAa,IAAI,WAAW;AAE9C,MAAI,CAAC,WAAW;AACd,WAAO,IAAI,SAAS,0BAA0B,EAAE,QAAQ,IAAI,CAAC;AAAA,EAC/D;AAEA,MAAI;AACF,UAAM,OAAO,MAAM,IAAI,QAAQ,IAAI,SAAS;AAC5C,QAAI,SAAS,MAAM;AACjB,aAAO,IAAI,SAAS,mBAAmB,EAAE,QAAQ,IAAI,CAAC;AAAA,IACxD;AAEA,WAAO,IAAI,SAAS,MAAM;AAAA,MACxB,SAAS;AAAA,QACP,gBAAgB,KAAK,QAAQ;AAAA,QAC7B,iBAAiB;AAAA,MACnB;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAO;AACd,YAAQ,MAAM,uBAAuB,KAAK;AAC1C,WAAO,IAAI,SAAS,yBAAyB,EAAE,QAAQ,IAAI,CAAC;AAAA,EAC9D;AACF;AAEA,eAAsB,eAEpB,KACA,SACA;AACA,QAAM,EAAE,aAAa,IAAI,IAAI,IAAI,QAAQ,GAAG;AAC5C,QAAM,YAAY,aAAa,IAAI,WAAW;AAE9C,MAAI,CAAC,WAAW;AACd,WAAO,IAAI,SAAS,0BAA0B,EAAE,QAAQ,IAAI,CAAC;AAAA,EAC/D;AAEA,MAAI;AACF,UAAM,OAAO,MAAM,IAAI,QAAQ,IAAI,SAAS;AAC5C,QAAI,SAAS,MAAM;AACjB,aAAO,IAAI,SAAS,mBAAmB,EAAE,QAAQ,IAAI,CAAC;AAAA,IACxD;AAEA,WAAO,IAAI,SAAS,MAAM;AAAA,MACxB,SAAS;AAAA,QACP,gBAAgB,KAAK,QAAQ;AAAA,QAC7B,iBAAiB;AAAA,MACnB;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,WAAO,IAAI,SAAS,yBAAyB,EAAE,QAAQ,IAAI,CAAC;AAAA,EAC9D;AACF;","names":[]}