{"version":3,"sources":["../../src/image/view/ImageView.tsx","../../src/image/view/ImageViewProviderContext.tsx","../../src/image/view/ImageViewProvider.tsx"],"sourcesContent":["import { Ellipsis, X } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useImageView } from \"./ImageViewProviderContext\";\n\ntype ImageViewProps = {\n    src: string;\n    alt: string;\n}\n\nexport function ImageView({ src, alt }: ImageViewProps) {\n    const [status, setStatus] = useState<\"loading\" | \"loaded\" | \"error\">(\"loading\");\n    const [imgClassNames, setImgClassNames] = useState<string>(\"w-full h-full object-cover\");\n    const { transformImageUrlFn } = useImageView();\n    const imageSrc = transformImageUrlFn ? transformImageUrlFn(src) : src;\n    return <div className=\"w-full h-full relative\">\n        <img\n            src={imageSrc}\n            alt={alt}\n            className={imgClassNames}\n            onLoad={() => {\n                setStatus(\"loaded\");\n                setImgClassNames(\"w-full h-full object-cover\");\n            }}\n            onError={() => {\n                setStatus(\"error\");\n                setImgClassNames(\"w-0 h-0\");\n            }}\n        />\n        {status === \"loading\" && (\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n                <Ellipsis className=\"h-4 w-4 animate-pulse\" />\n            </div>\n        )}\n        {status === \"error\" && (\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n                <X className=\"h-4 w-4\" />\n            </div>\n        )}\n    </div>\n}","import { createContext, useContext } from \"react\";\r\n\r\nexport type TransformImageUrlFn = (storageId: string) => string;\r\n\r\nconst defaultTransform: TransformImageUrlFn = (storageId: string) => storageId;\r\n\r\nconst ImageViewContext = createContext<{ transformImageUrlFn: TransformImageUrlFn }>({\r\n    transformImageUrlFn: defaultTransform,\r\n});\r\n\r\nexport const useImageView = () => useContext(ImageViewContext);\r\n\r\nexport default ImageViewContext;\r\n\r\n","import React from \"react\";\r\nimport type { TransformImageUrlFn } from \"./ImageViewProviderContext\";\r\nimport ImageViewContext from \"./ImageViewProviderContext\";\r\n\r\ntype ImageViewProviderProps = {\r\n    transformImageUrlFn?: TransformImageUrlFn;\r\n    children: React.ReactNode;\r\n};\r\n\r\nexport function ImageViewProvider({ transformImageUrlFn, children }: ImageViewProviderProps) {\r\n    const fn = transformImageUrlFn ?? ((id: string) => id);\r\n    return <ImageViewContext.Provider value={{ transformImageUrlFn: fn }}>{children}</ImageViewContext.Provider>;\r\n}\r\n\r\nexport default ImageViewProvider;\r\n\r\n"],"mappings":";;;AAAA,SAAS,UAAU,SAAS;AAC5B,SAAS,gBAAgB;;;ACDzB,SAAS,eAAe,kBAAkB;AAI1C,IAAM,mBAAwC,CAAC,cAAsB;AAErE,IAAM,mBAAmB,cAA4D;AAAA,EACjF,qBAAqB;AACzB,CAAC;AAEM,IAAM,eAAe,MAAM,WAAW,gBAAgB;AAE7D,IAAO,mCAAQ;;;ADEJ,SACH,KADG;AALJ,SAAS,UAAU,EAAE,KAAK,IAAI,GAAmB;AACpD,QAAM,CAAC,QAAQ,SAAS,IAAI,SAAyC,SAAS;AAC9E,QAAM,CAAC,eAAe,gBAAgB,IAAI,SAAiB,4BAA4B;AACvF,QAAM,EAAE,oBAAoB,IAAI,aAAa;AAC7C,QAAM,WAAW,sBAAsB,oBAAoB,GAAG,IAAI;AAClE,SAAO,qBAAC,SAAI,WAAU,0BAClB;AAAA;AAAA,MAAC;AAAA;AAAA,QACG,KAAK;AAAA,QACL;AAAA,QACA,WAAW;AAAA,QACX,QAAQ,MAAM;AACV,oBAAU,QAAQ;AAClB,2BAAiB,4BAA4B;AAAA,QACjD;AAAA,QACA,SAAS,MAAM;AACX,oBAAU,OAAO;AACjB,2BAAiB,SAAS;AAAA,QAC9B;AAAA;AAAA,IACJ;AAAA,IACC,WAAW,aACR,oBAAC,SAAI,WAAU,qDACX,8BAAC,YAAS,WAAU,yBAAwB,GAChD;AAAA,IAEH,WAAW,WACR,oBAAC,SAAI,WAAU,qDACX,8BAAC,KAAE,WAAU,WAAU,GAC3B;AAAA,KAER;AACJ;;;AEvCA,OAAkB;AAWP,gBAAAA,YAAA;AAFJ,SAAS,kBAAkB,EAAE,qBAAqB,SAAS,GAA2B;AACzF,QAAM,KAAK,wBAAwB,CAAC,OAAe;AACnD,SAAO,gBAAAA,KAAC,iCAAiB,UAAjB,EAA0B,OAAO,EAAE,qBAAqB,GAAG,GAAI,UAAS;AACpF;","names":["jsx"]}