{"version":3,"sources":["../src/providers/FileUploadProvider.tsx","../src/hooks/useFileUpload.ts","../src/components/MultipleFileUploaderHeadless.tsx","../src/components/SingleFileUploaderHeadless.tsx"],"sourcesContent":["import type { Id } from 'node_modules/convex/dist/esm-types/values/value'\r\nimport { createContext, type ReactNode, useContext } from 'react'\r\n\r\nexport type GenerateUploadUrlFunc = () => Promise<string>\r\nexport type SaveFileFunc = (args: {\r\n  name: string\r\n  storageId: Id<'_storage'>\r\n  type: string\r\n  size: number\r\n}) => Promise<unknown>\r\nexport type DeleteFileFunc = (args: {\r\n  storageId: Id<'_storage'>\r\n}) => Promise<unknown>\r\n\r\ninterface FileUploadContextState {\r\n  generateUploadUrl: GenerateUploadUrlFunc\r\n  saveFile: SaveFileFunc\r\n  deleteFile: DeleteFileFunc\r\n}\r\n\r\nconst FileUploadContext = createContext<FileUploadContextState | undefined>(\r\n  undefined,\r\n)\r\n\r\ninterface FileUploadProviderProps {\r\n  children: ReactNode\r\n  generateUploadUrl: GenerateUploadUrlFunc\r\n  saveFile: SaveFileFunc\r\n  deleteFile: DeleteFileFunc\r\n}\r\n\r\nexport const FileUploadProvider = ({\r\n  children,\r\n  generateUploadUrl,\r\n  saveFile,\r\n  deleteFile,\r\n}: FileUploadProviderProps) => {\r\n  const value = {\r\n    generateUploadUrl,\r\n    saveFile,\r\n    deleteFile,\r\n  }\r\n\r\n  return (\r\n    <FileUploadContext.Provider value={value}>\r\n      {children}\r\n    </FileUploadContext.Provider>\r\n  )\r\n}\r\n\r\n// eslint-disable-next-line react-refresh/only-export-components\r\nexport const useFileUploadActions = () => {\r\n  const context = useContext(FileUploadContext)\r\n  if (context === undefined) {\r\n    throw new Error(\r\n      'useFileUploadActions must be used within a FileUploadProvider',\r\n    )\r\n  }\r\n  return context\r\n}\r\n","import { useFileUploadActions } from '@/providers/FileUploadProvider'\r\nimport type { Id } from 'node_modules/convex/dist/esm-types/values/value'\r\nimport { useCallback, useState } from 'react'\r\nimport { toast } from 'sonner'\r\n\r\nexport interface UseFileUploadConfig {\r\n  maxSizeInMB?: number\r\n  allowedTypes?: string[]\r\n  successMessage?: string\r\n  errorMessage?: string\r\n  deleteSuccessMessage?: string\r\n  deleteErrorMessage?: string\r\n}\r\n\r\nexport function useFileUpload(config: UseFileUploadConfig = {}) {\r\n  const {\r\n    generateUploadUrl,\r\n    saveFile,\r\n    deleteFile: providedDeleteFile,\r\n  } = useFileUploadActions()\r\n\r\n  const {\r\n    maxSizeInMB = 10,\r\n    allowedTypes = [],\r\n    successMessage = 'File uploaded successfully!',\r\n    errorMessage = 'Failed to upload file',\r\n    deleteSuccessMessage = 'File deleted successfully!',\r\n    deleteErrorMessage = 'Failed to delete file.',\r\n  } = config\r\n\r\n  const [isUploading, setIsUploading] = useState(false)\r\n  const [isDeleting, setIsDeleting] = useState(false)\r\n\r\n  const validateFile = useCallback(\r\n    (file: File): string | null => {\r\n      if (file.size > maxSizeInMB * 1024 * 1024) {\r\n        return `File size must be less than ${maxSizeInMB}MB`\r\n      }\r\n      if (allowedTypes.length > 0 && !allowedTypes.includes(file.type)) {\r\n        return `File type not allowed. Allowed types: ${allowedTypes.join(', ')}`\r\n      }\r\n      return null\r\n    },\r\n    [maxSizeInMB, allowedTypes],\r\n  )\r\n\r\n  const uploadFile = useCallback(\r\n    async (file: File): Promise<string> => {\r\n      const validationError = validateFile(file)\r\n      if (validationError) {\r\n        toast.error(validationError)\r\n        throw new Error(validationError)\r\n      }\r\n\r\n      setIsUploading(true)\r\n      const loadingToast = toast.loading(`Uploading ${file.name}...`)\r\n\r\n      try {\r\n        const uploadUrl = await generateUploadUrl()\r\n        const result = await fetch(uploadUrl, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': file.type },\r\n          body: file,\r\n        })\r\n\r\n        if (!result.ok) throw new Error(`Upload failed: ${result.statusText}`)\r\n\r\n        const { storageId } = await result.json()\r\n\r\n        await saveFile({\r\n          name: file.name,\r\n          storageId,\r\n          type: file.type,\r\n          size: file.size,\r\n        })\r\n\r\n        setIsUploading(false)\r\n        toast.success(successMessage, { id: loadingToast })\r\n        return storageId as string\r\n      } catch (error) {\r\n        setIsUploading(false)\r\n        const message = error instanceof Error ? error.message : errorMessage\r\n        toast.error(message, { id: loadingToast })\r\n        throw error\r\n      }\r\n    },\r\n    [validateFile, generateUploadUrl, saveFile, successMessage, errorMessage],\r\n  )\r\n\r\n  const uploadMultipleFiles = useCallback(\r\n    async (files: File[]): Promise<string[]> => {\r\n      const loadingToast = toast.loading(`Uploading ${files.length} files...`)\r\n      try {\r\n        const storageIds = await Promise.all(files.map(uploadFile))\r\n        toast.success(`Successfully uploaded ${files.length} files!`, {\r\n          id: loadingToast,\r\n        })\r\n        return storageIds\r\n      } catch (error) {\r\n        toast.error('Some files failed to upload.', { id: loadingToast })\r\n        throw error\r\n      }\r\n    },\r\n    [uploadFile],\r\n  )\r\n\r\n  const deleteFile = useCallback(\r\n    async (args: { storageId: Id<'_storage'> }) => {\r\n      setIsDeleting(true)\r\n      const loadingToast = toast.loading('Deleting file...')\r\n      try {\r\n        await providedDeleteFile(args)\r\n        toast.success(deleteSuccessMessage, { id: loadingToast })\r\n      } catch (error) {\r\n        const message =\r\n          error instanceof Error ? error.message : deleteErrorMessage\r\n        toast.error(message, { id: loadingToast })\r\n        throw error\r\n      } finally {\r\n        setIsDeleting(false)\r\n      }\r\n    },\r\n    [providedDeleteFile, deleteSuccessMessage, deleteErrorMessage],\r\n  )\r\n\r\n  return {\r\n    uploadFile,\r\n    uploadMultipleFiles,\r\n    deleteFile,\r\n    isUploading,\r\n    isDeleting,\r\n  }\r\n}\r\n","import { useFileUpload } from '@/hooks/useFileUpload'\nimport type { Id } from 'node_modules/convex/dist/esm-types/values/value'\nimport React, { useRef, useState } from 'react'\n\ntype MultipleFileUploaderHeadlessRenderProps = {\n  isUploading: boolean\n  fileFields: { id: string; value: string }[]\n  handleFileChange: (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => Promise<void>\n  handleFileDelete: (index: number) => Promise<void>\n  triggerFileSelect: () => void\n  fileInputRef: React.RefObject<HTMLInputElement | null>\n  maxFiles: number\n  canAddMore: boolean\n  remainingSlots: number\n}\n\ntype MultipleFileUploaderHeadlessProps = {\n  fileFields: { id: string; value: string }[]\n  appendFile: (f: { value: string }) => void\n  removeFile: (index: number) => void\n  maxFiles: number\n  maxSizeInMB?: number\n  allowedTypes?: string[]\n  successMessage?: string\n  errorMessage?: string\n  children: (props: MultipleFileUploaderHeadlessRenderProps) => React.ReactNode\n}\n\nexport function MultipleFileUploaderHeadless({\n  fileFields,\n  appendFile,\n  removeFile,\n  maxFiles,\n  maxSizeInMB,\n  allowedTypes = [],\n  successMessage = 'Files uploaded successfully!',\n  errorMessage = 'Failed to upload files',\n  children,\n}: MultipleFileUploaderHeadlessProps) {\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  const [isUploading, setIsUploading] = useState(false)\n\n  const { uploadFile, uploadMultipleFiles, deleteFile } = useFileUpload({\n    maxSizeInMB,\n    allowedTypes,\n    successMessage,\n    errorMessage,\n  })\n\n  const handleFileDelete = async (index: number) => {\n    await deleteFile({ storageId: fileFields[index].value as Id<'_storage'> })\n    removeFile(index)\n  }\n\n  const handleFileChange = async (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const files = event.target.files\n    if (!files || files.length === 0) return\n\n    const filesArray = Array.from(files)\n    const remaining = Math.max(0, maxFiles - fileFields.length)\n\n    if (remaining <= 0) {\n      if (fileInputRef.current) fileInputRef.current.value = ''\n      return\n    }\n\n    if (filesArray.length > remaining) {\n      filesArray.splice(remaining)\n    }\n\n    setIsUploading(true)\n    try {\n      if (filesArray.length === 1) {\n        const storageId = await uploadFile(filesArray[0])\n        appendFile({ value: storageId })\n      } else {\n        const storageIds = await uploadMultipleFiles(filesArray)\n        storageIds.forEach((storageId) => appendFile({ value: storageId }))\n      }\n    } finally {\n      setIsUploading(false)\n    }\n\n    if (fileInputRef.current) fileInputRef.current.value = ''\n  }\n\n  const triggerFileSelect = () => {\n    fileInputRef.current?.click()\n  }\n\n  const canAddMore = fileFields.length < maxFiles\n  const remainingSlots = Math.max(0, maxFiles - fileFields.length)\n\n  const renderProps: MultipleFileUploaderHeadlessRenderProps = {\n    isUploading,\n    fileFields,\n    handleFileChange,\n    handleFileDelete,\n    triggerFileSelect,\n    fileInputRef,\n    maxFiles,\n    canAddMore,\n    remainingSlots,\n  }\n\n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        onChange={handleFileChange}\n        className=\"hidden\"\n        accept={allowedTypes.join(',')}\n      />\n      {children(renderProps)}\n    </>\n  )\n}\n","import { useFileUpload } from '@/hooks/useFileUpload'\r\nimport type { Id } from 'node_modules/convex/dist/esm-types/values/value'\r\nimport React, { useRef, useState } from 'react'\r\n\r\ntype SingleFileUploaderHeadlessRenderProps = {\r\n  isUploading: boolean\r\n  file?: string | null\r\n  handleFileChange: (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => Promise<void>\r\n  handleFileDelete: () => Promise<void>\r\n  triggerFileSelect: () => void\r\n  fileInputRef: React.RefObject<HTMLInputElement | null>\r\n  hasFile: boolean\r\n}\r\n\r\ntype SingleFileUploaderHeadlessProps = {\r\n  file?: string | null\r\n  setFile: (f: string) => void\r\n  removeFile: () => void\r\n  maxSizeInMB?: number\r\n  allowedTypes?: string[]\r\n  successMessage?: string\r\n  errorMessage?: string\r\n  children: (props: SingleFileUploaderHeadlessRenderProps) => React.ReactNode\r\n}\r\n\r\nexport function SingleFileUploaderHeadless({\r\n  file,\r\n  setFile,\r\n  removeFile,\r\n  maxSizeInMB,\r\n  allowedTypes = [],\r\n  successMessage = 'File uploaded successfully!',\r\n  errorMessage = 'Failed to upload file',\r\n  children,\r\n}: SingleFileUploaderHeadlessProps) {\r\n  const fileInputRef = useRef<HTMLInputElement>(null)\r\n  const [isUploading, setIsUploading] = useState(false)\r\n\r\n  const { uploadFile, deleteFile } = useFileUpload({\r\n    maxSizeInMB,\r\n    allowedTypes,\r\n    successMessage,\r\n    errorMessage,\r\n  })\r\n\r\n  const handleFileDelete = async () => {\r\n    if (!file) return\r\n    await deleteFile({ storageId: file as Id<'_storage'> })\r\n    removeFile()\r\n  }\r\n\r\n  const handleFileChange = async (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    const files = event.target.files\r\n    if (!files || files.length === 0) return\r\n\r\n    const pickedFile = files[0]\r\n\r\n    setIsUploading(true)\r\n    try {\r\n      const storageId = await uploadFile(pickedFile)\r\n      setFile(storageId)\r\n    } finally {\r\n      setIsUploading(false)\r\n    }\r\n\r\n    if (fileInputRef.current) fileInputRef.current.value = ''\r\n  }\r\n\r\n  const triggerFileSelect = () => {\r\n    fileInputRef.current?.click()\r\n  }\r\n\r\n  const hasFile = Boolean(file)\r\n\r\n  const renderProps: SingleFileUploaderHeadlessRenderProps = {\r\n    isUploading,\r\n    file,\r\n    handleFileChange,\r\n    handleFileDelete,\r\n    triggerFileSelect,\r\n    fileInputRef,\r\n    hasFile,\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        ref={fileInputRef}\r\n        type=\"file\"\r\n        onChange={handleFileChange}\r\n        className=\"hidden\"\r\n        accept={allowedTypes.join(',')}\r\n      />\r\n      {children(renderProps)}\r\n    </>\r\n  )\r\n}\r\n"],"mappings":"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","names":["useState","jsx","useRef","useState","Fragment","jsx","jsxs"]}